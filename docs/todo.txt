API Documentation

Endpoints:

/users/profile-info

    Gets the profile information for the requested user
    #####################
    #### POST request ###
    #####################

    Request Format
    {
        "nickname": "nickname" (if empty get the profile of the requester(by token))
    }

    Response JSON
    {
        "username": "username",
        "nickname": "nickname",
        "avatar": "picture (tbd)",
        "trophies": "100",
        "games_total": "6",
        "wins": "5",
        "losses": "1",
        "blocked": [
            "username1",
            "username2"
        ],
        "friends": [
            "username1",
            "username2"
        ],
        "history": [ ## ARRAY ##
            {
                "opponent": "opponentUser1",
                "result": "win",
                "score": "3-1"
            },
            {
                "opponent": "opponentUser2",
                "result": "lose",
                "score": "5-2"
            },
            {
                "opponent": "opponentUser3",
                "result": "win",
                "score": "2-8"
            }
        ],
        "status": "online"  ###### Booleon for when they sign in #####
    }

#####  Get the information for all users ##### fetch all ##### GET Request #####
/users/profile-list

#################
## GET request ##
#################
    Response JSON Example for 2 users:
    [
        {
            "username": "user1",
            "nickname": "nickname1",
            "avatar": "picture1",
            "trophies": 150,
            "status": "online"
        },
        {
            "username": "user2",
            "nickname": "nickname2",
            "avatar": "picture2",
            "trophies": 200,
            "status": "offline"
        }
    ]

    Note: The other profile information get requested if needed with the Enpoint /users/profile-info

/users/update-profile

###################
### PUT request ###
###################

    Allows updating the user's nickname and avatar.

    Request Format
    {
        "username": "user",
        "nickname": "newNickname",
        "avatar": "newAvatar"
    }

    Response Example
    {
        "success": true,
        "message": "Nickname and avatar updated successfully."
    }

    ### SEE BELOW FOR NEW REQUEST FIELDS ###

##############################
### Update profile version ###
##############################

For updating the nickname only:

{
    "nickname": "newNickname"
}

For updating the avatar only:

{
    "avatar": "newAvatarPath"
}

For updating both nickname and avatar:

{
    "nickname": "newNickname",
    "avatar": "newAvatarPath"
}

* Response
{
    "success": true,
    "message": "Nickname and avatar updated successfully."
}

or

{
    "success": true,
    "message": "Nickname updated successfully."
}

or

{
    "success": true,
    "message": "Avatar updated successfully."
}


/add-friend

    Adds or removes a user as a friend. This endpoint updates the friend lists of both users simultaneously.
    #### dont store as nickname, store as username/user id but send out nickname when someone requests this friend in their profile ###
    Request Format
    {
        "nickname": "user",
        "type": "add/remove"  // Use "add" to add a friend or "remove" to remove a friend
    }

    Response Example
    {
        "success": true,
        "message": "Friendship updated successfully."
    }

/block-user

    Blocks or unblocks a user. This endpoint updates the blocklists of both users simultaneously.

    Request Format
    {
        "nickname": "user",
        "type": "add/remove"  // Use "add" to block a user or "remove" to unblock (add user to the blocked list of the responding user(get via token))
    }

    Response Example
    {
        "success": true,
        "message": "Blocklist updated successfully."
    }


Only allow letters and numbers 0-9 a-z A-Z for usernames and nicknames

## Send errror response regarding false nickname/username ##



