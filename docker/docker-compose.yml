version: '3.9'

services:
  auth-db:
    container_name: auth-db
    build: ./../backend/user-management/auth-service/postgres
    environment:
      POSTGRES_USER: ${AUTH_SERVICE_USER}
      POSTGRES_PASSWORD: ${AUTH_SERVICE_PASSWORD}
      POSTGRES_DB: ${AUTH_SERVICE_DB}
    volumes:
      - auth_data:/var/lib/postgresql/data
    networks:
      my_network:
    healthcheck:
      test: [ "CMD-SHELL", "[ -f /var/lib/postgresql/data/.db_ready ] || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    ports:
      - "5432:5432"

  user-db:
    container_name: user-db
    build: ./../backend/user-management/user-service/postgres
    environment:
      POSTGRES_USER: ${USER_SERVICE_USER}
      POSTGRES_PASSWORD: ${USER_SERVICE_PASSWORD}
      POSTGRES_DB: ${USER_SERVICE_DB}
    volumes:
      - user_data:/var/lib/postgresql/data
    networks:
      my_network:
    healthcheck:
      test: [ "CMD-SHELL", "[ -f /var/lib/postgresql/data/.db_ready ] || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    ports:
      - "5433:5432"

  chat-db:
    container_name: chat-db
    build: ./../backend/chat-service/postgres
    environment:
      POSTGRES_USER: ${CHAT_SERVICE_USER}
      POSTGRES_PASSWORD: ${CHAT_SERVICE_PASSWORD}
      POSTGRES_DB: ${CHAT_SERVICE_DB}
    volumes:
      - chat_data:/var/lib/postgresql/data
    networks:
      my_network:
    healthcheck:
      test: [ "CMD-SHELL", "[ -f /var/lib/postgresql/data/.db_ready ] || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    ports:
      - "5436:5432"

  pong-db:
    container_name: pong-db
    build: ./../backend/pong/postgres
    environment:
      POSTGRES_USER: ${PONG_SERVICE_USER}
      POSTGRES_PASSWORD: ${PONG_SERVICE_PASSWORD}
      POSTGRES_DB: ${PONG_SERVICE_DB}
    volumes:
      - pong_data:/var/lib/postgresql/data
    networks:
      my_network:
    healthcheck:
      test: [ "CMD-SHELL", "[ -f /var/lib/postgresql/data/.db_ready ] || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    ports:
      - "5435:5432"
  
  lobby-db:
    container_name: lobby-db
    build: ./../backend/lobby/postgres
    environment:
      POSTGRES_USER: ${LOBBY_SERVICE_USER}
      POSTGRES_PASSWORD: ${LOBBY_SERVICE_PASSWORD}
      POSTGRES_DB: ${LOBBY_SERVICE_DB}
    volumes:
      - lobby_data:/var/lib/postgresql/data
    networks:
      my_network:
    healthcheck:
      test: [ "CMD-SHELL", "[ -f /var/lib/postgresql/data/.db_ready ] || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    ports:
      - "5437:5432"

  auth-service:
    build: ./../backend/user-management/auth-service
    container_name: auth-service
    environment:
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
      DJANGO_DEBUG: ${DJANGO_DEBUG}
      AUTH_SERVICE_DB: ${AUTH_SERVICE_DB}
      AUTH_SERVICE_USER: ${AUTH_SERVICE_USER}
      AUTH_SERVICE_PASSWORD: ${AUTH_SERVICE_PASSWORD}
      DJANGO_SUPERUSER_USERNAME: ${DJANGO_SUPERUSER_USERNAME}
      DJANGO_SUPERUSER_EMAIL: ${DJANGO_SUPERUSER_EMAIL}
      DJANGO_SUPERUSER_PASSWORD: ${DJANGO_SUPERUSER_PASSWORD}
    networks:
      my_network:
    healthcheck:
      test: [ "CMD-SHELL", "curl -k -f http://localhost:8000/auth/health/ || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      auth-db:
        condition: service_healthy
    restart: always
    ports:
      - "8000:8000"

  user-service:
    build: ./../backend/user-management/user-service
    container_name: user-service
    environment:
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
      DJANGO_DEBUG: ${DJANGO_DEBUG}
      USER_SERVICE_DB: ${USER_SERVICE_DB}
      USER_SERVICE_USER: ${USER_SERVICE_USER}
      USER_SERVICE_PASSWORD: ${USER_SERVICE_PASSWORD}
      DJANGO_SUPERUSER_USERNAME: ${DJANGO_SUPERUSER_USERNAME}
      DJANGO_SUPERUSER_EMAIL: ${DJANGO_SUPERUSER_EMAIL}
      DJANGO_SUPERUSER_PASSWORD: ${DJANGO_SUPERUSER_PASSWORD}
    networks:
      my_network:
    healthcheck:
      test: [ "CMD-SHELL", "curl -k -f http://localhost:8000/users/health/ || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      user-db:
        condition: service_healthy
    restart: always
    ports:
      - "8001:8000"

  chat-service:
    build: ./../backend/chat-service
    container_name: chat-service
    environment:
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
      DJANGO_DEBUG: ${DJANGO_DEBUG}
      CHAT_SERVICE_DB: ${CHAT_SERVICE_DB}
      CHAT_SERVICE_USER: ${CHAT_SERVICE_USER}
      CHAT_SERVICE_PASSWORD: ${CHAT_SERVICE_PASSWORD}
      DJANGO_SUPERUSER_USERNAME: ${DJANGO_SUPERUSER_USERNAME}
      DJANGO_SUPERUSER_EMAIL: ${DJANGO_SUPERUSER_EMAIL}
      DJANGO_SUPERUSER_PASSWORD: ${DJANGO_SUPERUSER_PASSWORD}
      REDIS_URL: "redis://redis:6379"
    networks:
      my_network:
    healthcheck:
      test: [ "CMD-SHELL", "curl -k -f https://localhost:443/chat/health/ || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      pong-db:
        condition: service_healthy
    restart: always
    ports:
      - "10443:443"

  pong-game:
    build: ./../backend/pong
    volumes:
      - ./../backend/pong:/app
    container_name: pong
    environment:
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
      DJANGO_DEBUG: ${DJANGO_DEBUG}
      PONG_SERVICE_DB: ${PONG_SERVICE_DB}
      PONG_SERVICE_USER: ${PONG_SERVICE_USER}
      PONG_SERVICE_PASSWORD: ${PONG_SERVICE_PASSWORD}
      DJANGO_SUPERUSER_USERNAME: ${DJANGO_SUPERUSER_USERNAME}
      DJANGO_SUPERUSER_EMAIL: ${DJANGO_SUPERUSER_EMAIL}
      DJANGO_SUPERUSER_PASSWORD: ${DJANGO_SUPERUSER_PASSWORD}
    working_dir: /app
    networks:
      my_network:
    healthcheck:
      test: [ "CMD-SHELL", "curl -k -f http://localhost:8000/pong/health/ || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      pong-db:
        condition: service_healthy
    restart: always
    ports:
      - "8002:8000"
  
  lobby:
    build: ./../backend/lobby
    volumes:
      - ./../backend/lobby:/app
    container_name: lobby
    environment:
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
      DJANGO_DEBUG: ${DJANGO_DEBUG}
      LOBBY_SERVICE_DB: ${LOBBY_SERVICE_DB}
      LOBBY_SERVICE_USER: ${LOBBY_SERVICE_USER}
      LOBBY_SERVICE_PASSWORD: ${LOBBY_SERVICE_PASSWORD}
      DJANGO_SUPERUSER_USERNAME: ${DJANGO_SUPERUSER_USERNAME}
      DJANGO_SUPERUSER_EMAIL: ${DJANGO_SUPERUSER_EMAIL}
      DJANGO_SUPERUSER_PASSWORD: ${DJANGO_SUPERUSER_PASSWORD}
      REDIS_URL: "redis://redis:6379"
    working_dir: /app
    networks:
      my_network:
    healthcheck:
      test: [ "CMD-SHELL", "curl -k -f http://localhost:8000/lobby/health/ || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      lobby-db:
        condition: service_healthy
    restart: always
    ports:
      - "8003:8000"

  redis:
    image: redis:alpine
    container_name: redis
    networks:
      my_network:
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: always

  stunnel:
    build: ./../backend/stunnel
    container_name: stunnel
    networks:
      my_network:
    ports:
      - "6380:6380" # Redis TLS port
    restart: always

  nginx:
    build: ./../frontend
    container_name: nginx
    depends_on:
      auth-service:
        condition: service_healthy
      user-service:
        condition: service_healthy
      chat-service:
        condition: service_healthy
      pong-game:
        condition: service_healthy
      lobby:
        condition: service_healthy
    networks:
      my_network:
    ports:
      - "80:80"
      - "443:443"
    restart: always

networks:
  my_network:


volumes:
  user_data:
  auth_data:
  db_data:
  chat_data:
  pong_data:
  lobby_data:
  redis_data: